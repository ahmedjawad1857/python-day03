Python Classes/Objects
Python is an object oriented programming language.

Almost everything in Python is an object, with its properties and methods.

A Class is like an object constructor, or a "blueprint" for creating objects.

The __init__() Function
The examples above are classes and objects in their simplest form, and are not really useful in real life applications.

To understand the meaning of classes we have to understand the built-in __init__() function.

All classes have a function called __init__(), which is always executed when the class is being initiated.

Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:

The __str__() Function
The __str__() function controls what should be returned when the class object is represented as a string.

If the __str__() function is not set, the string representation of the object is returned:

Note: The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.

The self Parameter
The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.

It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:

Python Inheritance
Inheritance allows us to define a class that inherits all the methods and properties from another class.

Parent class is the class being inherited from, also called base class.

Child class is the class that inherits from another class, also called derived class.

Use the super() Function
Python also has a super() function that will make the child class inherit all the methods and properties from its parent:

Python Iterators
An iterator is an object that contains a countable number of values.

An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.

Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().

Iterator vs Iterable
Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.

All these objects have a iter() method which is used to get an iterator

The for loop actually creates an iterator object and executes the next() method for each loop.

Create an Iterator
To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.

As you have learned in the Python Classes/Objects chapter, all classes have a function called __init__(), which allows you to do some initializing when the object is being created.

The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.

The __next__() method also allows you to do operations, and must return the next item in the sequence.


StopIteration
The example above would continue forever if you had enough next() statements, or if it was used in a for loop.

To prevent the iteration from going on forever, we can use the StopIteration statement.

The word "polymorphism" means "many forms", and in programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes.

Function Polymorphism
An example of a Python function that can be used on different objects is the len() function.

Inheritance Class Polymorphism
What about classes with child classes with the same name? Can we use polymorphism there?

Yes. If we use the example above and make a parent class called Vehicle, and make Car, Boat, Plane child classes of Vehicle, the child classes inherits the Vehicle methods, but can override them:

variable scope:
A variable is only available from inside the region it is created. This is called scope.

Local Scope
A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.

Global Scope
A variable created in the main body of the Python code is a global variable and belongs to the global scope.

Global variables are available from within any scope, global and local.

Naming Variables
If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables, one available in the global scope (outside the function) and one available in the local scope (inside the function):

Global Keyword
If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.

The global keyword makes the variable global.

Python Modules

What is a Module?
Consider a module to be the same as a code library.

A file containing a set of functions you want to include in your application.

Create a Module
To create a module just save the code you want in a file with the file extension .py:

Note: When using a function from a module, use the syntax: module_name.function_name.

Variables in Module
The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc):

Naming a Module
You can name the module file whatever you like, but it must have the file extension .py

Re-naming a Module
You can create an alias when you import a module, by using the as keyword:

Built-in Modules
There are several built-in modules in Python, which you can import whenever you like.

Using the dir() Function
There is a built-in function to list all the function names (or variable names) in a module. The dir() function:
Note: The dir() function can be used on all modules, also the ones you create yourself.

Import From Module
You can choose to import only parts from a module, by using the from keyword.
Note: When importing using the from keyword, do not use the module name when referring to elements in the module. Example: person1["age"], not mymodule.person1["age"]

Python Dates
A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.

A reference of all the legal format codes:

|----------------|-----------------------------------------------------|----------------------------------|
| Directive | Description                                       | Example                  |
|-----------|---------------------------------------------------|--------------------------|
| %a        | Weekday, short version                            | Wed                      |
| %A        | Weekday, full version                             | Wednesday                |
| %w        | Weekday as a number 0-6, 0 is Sunday              | 3                        |
| %d        | Day of month 01-31                                | 31                       |
| %b        | Month name, short version                         | Dec                      |
| %B        | Month name, full version                          | December                 |
| %m        | Month as a number 01-12                           | 12                       |
| %y        | Year, short version, without century              | 18                       |
| %Y        | Year, full version                                | 2018                     |
| %H        | Hour 00-23                                        | 17                       |
| %I        | Hour 00-12                                        | 05                       |
| %p        | AM/PM                                             | PM                       |
| %M        | Minute 00-59                                      | 41                       |
| %S        | Second 00-59                                      | 08                       |
| %f        | Microsecond 000000-999999                         | 548513                   |
| %z        | UTC offset                                        | +0100                    |
| %Z        | Timezone                                          | CST                      |
| %j        | Day number of year 001-366                        | 365                      |
| %U        | Week number of year, Sunday as the first day      | 52                       |
| %W        | Week number of year, Monday as the first day      | 52                       |
| %c        | Local version of date and time                    | Mon Dec 31 17:41:00 2018 |
| %C        | Century                                           | 20                       |
| %x        | Local version of date                             | 12/31/18                 |
| %X        | Local version of time                             | 17:41:00                 |
| %%        | A % character                                     | %                        |
| %G        | ISO 8601 year                                     | 2018                     |
| %u        | ISO 8601 weekday (1-7)                            | 1                        |
| %V        | ISO 8601 weeknumber (01-53)                       | 01                       |
|-----------|---------------------------------------------------|--------------------------|


Date Output
When we execute the code from the example above the result will be:

2023-12-26 17:39:46.545649
The date contains year, month, day, hour, minute, second, and microsecond.

The datetime module has many methods to return information about the date object.

Here are a few examples, you will learn more about them later in this chapter:

reating Date Objects
To create a date, we can use the datetime() class (constructor) of the datetime module.

The datetime() class requires three parameters to create a date: year, month, day.
The datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone).

The strftime() Method
The datetime object has a method for formatting date objects into readable strings.

The method is called strftime(), and takes one parameter, format, to specify the format of the returned string:

Python has a set of built-in math functions, including an extensive math module, that allows you to perform mathematical tasks on numbers.

Built-in Math Functions

|----------------|-----------------------------------------------------|----------------------------------|
| Function                  | Description                                         | Example Usage                   |
|---------------------------|-----------------------------------------------------|----------------------------------|
| `abs(x)`                  | Returns the absolute value of x.                    | `abs(-5)` → `5`                 |
| `pow(x, y)`               | Returns x raised to the power y.                    | `pow(2, 3)` → `8`               |
| `sqrt(x)`                 | Returns the square root of x.                       | `sqrt(25)` → `5.0`              |
| `exp(x)`                  | Returns the exponential of x (e^x).                 | `exp(1)` → `2.718281828459045` |
| `log(x)`                  | Returns the natural logarithm of x.                 | `log(10)` → `2.302585092994046`|
| `log10(x)`                | Returns the base-10 logarithm of x.                 | `log10(100)` → `2.0`           |
| `sin(x)`                  | Returns the sine of x (in radians).                 | `sin(0)` → `0.0`                |
| `cos(x)`                  | Returns the cosine of x (in radians).               | `cos(0)` → `1.0`                |
| `tan(x)`                  | Returns the tangent of x (in radians).              | `tan(0)` → `0.0`                |
| `degrees(x)`              | Converts angle x from radians to degrees.           | `degrees(math.pi)` → `180.0`   |
| `radians(x)`              | Converts angle x from degrees to radians.           | `radians(180)` → `3.1415926535`|
| `ceil(x)`                 | Returns the ceiling of x (smallest integer >= x).  | `ceil(3.14)` → `4`              |
| `floor(x)`                | Returns the floor of x (largest integer <= x).     | `floor(3.14)` → `3`             |
| `round(x, n)`             | Rounds x to n decimal places (default n=0).        | `round(3.14159, 2)` → `3.14`    |
| `fabs(x)`                 | Returns the absolute value of x (float).            | `fabs(-3.14)` → `3.14`          |
| `fmod(x, y)`              | Returns the remainder of x/y as a float.            | `fmod(10.5, 3.2)` → `1.3`       |
| `gcd(a, b)`               | Returns the greatest common divisor of a and b.     | `gcd(12, 18)` → `6`             |
| `isfinite(x)`             | Returns `True` if x is neither an infinity nor a NaN| `isfinite(5.0)` → `True`        |
| `isnan(x)`                | Returns `True` if x is a NaN (Not a Number).        | `isnan(float('nan'))` → `True` |
|---------------------------|-----------------------------------------------------|----------------------------------|
Note: The functions mentioned here are part of the math module in Python, so you need to import the module before using them, like import math.

The Math Module
Python has also a built-in module called math, which extends the list of mathematical functions.

To use it, you must import the math module:

Functions Requiring Import from math Module:

|----------------|-----------------------------------------------------|----------------------------------|
| Function       | Description                                         | Example Usage                    |
|----------------|-----------------------------------------------------|----------------------------------|
| `math.sqrt(x)` | Returns the square root of x.                       | `math.sqrt(25)` → `5.0`          |
| `math.exp(x)`  | Returns the exponential of x (e^x).                 | `math.exp(1)` → `2.718281828459045` |
| `math.log(x)`  | Returns the natural logarithm of x.                 | `math.log(10)` → `2.302585092994046`|
| `math.sin(x)`  | Returns the sine of x (in radians).                 | `math.sin(0)` → `0.0`                |
| `math.cos(x)`  | Returns the cosine of x (in radians).               | `math.cos(0)` → `1.0`                |
| `math.tan(x)`  | Returns the tangent of x (in radians).              | `math.tan(0)` → `0.0`                |
| `math.degrees(x)` | Converts angle x from radians to degrees.          | `math.degrees(math.pi)` → `180.0`   |
| `math.radians(x)` | Converts angle x from degrees to radians.          | `math.radians(180)` → `3.1415926535`|
| `math.ceil(x)` | Returns the ceiling of x (smallest integer >= x).   | `math.ceil(3.14)` → `4`              |
| `math.floor(x)`| Returns the floor of x (largest integer <= x).      | `math.floor(3.14)` → `3`             |
| `math.fabs(x)` | Returns the absolute value of x (float).            | `math.fabs(-3.14)` → `3.14`          |
| `math.fmod(x, y)` | Returns the remainder of x/y as a float.          | `math.fmod(10.5, 3.2)` → `1.3`       |
| `math.gcd(a, b)` | Returns the greatest common divisor of a and b.   | `math.gcd(12, 18)` → `6`             |
| `math.isfinite(x)` | Returns `True` if x is neither an infinity nor a NaN| `math.isfinite(5.0)` → `True`        |
| `math.isnan(x)`  | Returns `True` if x is a NaN (Not a Number).        | `math.isnan(float('nan'))` → `True` |
|----------------|-----------------------------------------------------|----------------------------------|


Built-in Functions (No Import Required):

|----------------|-----------------------------------------------------|----------------------------------|
| Function       | Description                                         | Example Usage                    |
|----------------|-----------------------------------------------------|----------------------------------|
| `abs(x)`       | Returns the absolute value of x.                    | `abs(-5)` → `5`                  |
| `max(iterable)`| Returns the largest item in an iterable or arguments.| `max(3, 7, 1)` → `7`             |
| `min(iterable)`| Returns the smallest item in an iterable or arguments.| `min(3, 7, 1)` → `1`             |
| `ceil(x)`      | Returns the ceiling of x (smallest integer >= x).   | `ceil(3.14)` → `4`               |
| `round(x, n)`  | Rounds x to n decimal places (default n=0).         | `round(3.14159, 2)` → `3.14`     |
|----------------|-----------------------------------------------------|----------------------------------|

JSON is a syntax for storing and exchanging data.

JSON is text, written with JavaScript object notation.

JSON in Python
Python has a built-in package called json, which can be used to work with JSON data.

Parse JSON - Convert from JSON to Python
If you have a JSON string, you can parse it by using the json.loads() method.

Convert from Python to JSON
If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.

You can convert Python objects of the following types, into JSON strings:

•dict
•list
•tuple
•string
•int
•float
•True
•False
•None

When you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:

|----------|------------------|
| Python   | JSON             |
|----------|------------------|
| dict     | Object           |
| list     | Array            |
| tuple    | Array            |
| str      | String           |
| int      | Number           |
| float    | Number           |
| True     | true             |
| False    | false            |
| None     | null             |
|----------|------------------|


Format the Result
The example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.

The json.dumps() method has parameters to make it easier to read the result:

You can also define the separators, default value is (", ", ": "), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values:

Order the Result
The json.dumps() method has parameters to order the keys in the result
Use the sort_keys parameter to specify if the result should be sorted or not:

A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.

RegEx can be used to check if a string contains the specified search pattern.

RegEx Module
Python has a built-in package called re, which can be used to work with Regular Expressions.

Import the re module:

RegEx in Python
When you have imported the re module, you can start using regular expressions:

RegEx Functions
The re module offers a set of functions that allows us to search a string for a match:

|----------|--------------------------------------------------------------------|
| Function | Description                                                        |
|----------|--------------------------------------------------------------------|
| findall  | Returns a list containing all matches in the string.               |
| search   | Returns a Match object if there is a match anywhere in the string. |
| split    | Returns a list where the string has been split at each match.      |
| sub      | Replaces one or many matches with a specified string.              |
|----------|--------------------------------------------------------------------|

Metacharacters
Metacharacters are characters with a special meaning:

|-----------|-------------------------------------------------------|---------------|
| Character | Description                                           | Example       |
|-----------|-------------------------------------------------------|---------------|
| []        | A set of characters                                   | "[a-m]"       |
| \         | Signals a special sequence(can also escape characters)| "\d"         |
| .         | Any character (except newline character)              | "he..o"       |
| ^         | Starts with                                           | "^hello"      |
| $         | Ends with                                             | "planet$"     |
| *         | Zero or more occurrences                              | "he.*o"       |
| +         | One or more occurrences                               | "he.+o"       |
| ?         | Zero or one occurrences                               | "he.?o"       |
| {}        | Exactly the specified number of occurrences           | "he.{2}o"     |
| \|        | Either or                                             | "falls\|stays"|
| ()        | Capture and group                                     |               |
|-----------|-------------------------------------------------------|---------------|

Special Sequences
A special sequence is a \ followed by one of the characters in the list below, and has a special meaning:

|-----------|--------------------------------------------------------------|--------------|
| Character | Description                                                  | Example      |
|-----------|--------------------------------------------------------------|--------------|
| \A        | Returns a match if the specified characters are at the beginning of the string | "\AThe"      |
| \b        | Returns a match where the specified characters are at the beginning or at the end of a word (raw string) | r"\bain" or r"ain\b" |
| \B        | Returns a match where the specified characters are present, but NOT at the beginning (or at the end) of a word (raw string) | r"\Bain" or r"ain\B" |
| \d        | Returns a match where the string contains digits (numbers from 0-9) | "\d"         |
| \D        | Returns a match where the string DOES NOT contain digits      | "\D"         |
| \s        | Returns a match where the string contains a white space character | "\s"         |
| \S        | Returns a match where the string DOES NOT contain a white space character | "\S"         |
| \w        | Returns a match where the string contains any word characters (letters from a to Z, digits from 0-9, and the underscore |_ character) | "\w" |
| \W        | Returns a match where the string DOES NOT contain any word characters | "\W"         |
| \Z        | Returns a match if the specified characters are at the end of the string | "Spain\Z"    |
|-----------|--------------------------------------------------------------|--------------|

Sets
A set is a set of characters inside a pair of square brackets [] with a special meaning:

|-------------|---------------------------------------------------------------|
| Set         | Description                                                   |
|-------------|---------------------------------------------------------------|
| [arn]       | Returns a match where one of the specified characters (a, r, or n) is present |
| [a-n]       | Returns a match for any lowercase character alphabetically between a and n |
| [^arn]      | Returns a match for any character EXCEPT a, r, and n          |
| [0123]      | Returns a match where any of the specified digits (0, 1, 2, or 3) are present |
| [0-9]       | Returns a match for any digit between 0 and 9                |
| [0-5][0-9]  | Returns a match for any two-digit numbers from 00 to 59      |
| [a-zA-Z]    | Returns a match for any character alphabetically between a and z, lowercase OR uppercase |
| [+]         | In sets, +, *, ., |, (), $, {} have no special meaning, so [+] means: return a match for any + character in the string |
|-------------|---------------------------------------------------------------|

Match Object
A Match Object is an object containing information about the search and the result.
Note: If there is no match, the value None will be returned, instead of the Match Object.

The Match object has properties and methods used to retrieve information about the search, and the result:

.span() returns a tuple containing the start-, and end positions of the match.
.string returns the string passed into the function
.group() returns the part of the string where there was a match

try... except

The try block lets you test a block of code for errors.

The except block lets you handle the error.

The else block lets you execute code when there is no error.

The finally block lets you execute code, regardless of the result of the try- and except blocks

Exception Handling
When an error occurs, or exception as we call it, Python will normally stop and generate an error message.

Since the try block raises an error, the except block will be executed.

Without the try block, the program will crash and raise an error:

Many Exceptions
You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:

Else
You can use the else keyword to define a block of code to be executed if no errors were raised:

Finally
The finally block, if specified, will be executed regardless if the try block raises an error or not.

Raise an exception
As a Python developer you can choose to throw an exception if a condition occurs.

To throw (or raise) an exception, use the raise keyword.

User Input
Python allows for user input.

That means we are able to ask the user for input.

The method is a bit different in Python 3.6 than Python 2.7.

Python 3.6 uses the input() method.

Python 2.7 uses the raw_input() method.

Python stops executing when it comes to the input() function, and continues when the user has given some input.

To make sure a string will display as expected, we can format the result with the format() method.

String format()
The format() method allows you to format selected parts of a string.

Sometimes there are parts of a text that you do not control, maybe they come from a database, or user input?

To control such values, add placeholders (curly brackets {}) in the text, and run the values through the format() method:

Customize Sort Function
You can also customize your own function by using the keyword argument key = function.

The function will return a number that will be used to sort the list (the lowest number first):